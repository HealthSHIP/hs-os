/*
 * Copyright (c) 2020 Ronald MacDonald <ronald@rmacd.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.healthship.jira.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * Details of an issue transition.
 */
@ApiModel(description = "Details of an issue transition.")
@JsonPropertyOrder({
  IssueTransition.JSON_PROPERTY_ID,
  IssueTransition.JSON_PROPERTY_NAME,
  IssueTransition.JSON_PROPERTY_TO,
  IssueTransition.JSON_PROPERTY_HAS_SCREEN,
  IssueTransition.JSON_PROPERTY_IS_GLOBAL,
  IssueTransition.JSON_PROPERTY_IS_INITIAL,
  IssueTransition.JSON_PROPERTY_IS_AVAILABLE,
  IssueTransition.JSON_PROPERTY_IS_CONDITIONAL,
  IssueTransition.JSON_PROPERTY_FIELDS,
  IssueTransition.JSON_PROPERTY_EXPAND
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-03-29T15:40:13.931673+01:00[Europe/London]")
public class IssueTransition extends HashMap<String, Object> {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_TO = "to";
  private StatusDetails to = null;

  public static final String JSON_PROPERTY_HAS_SCREEN = "hasScreen";
  private Boolean hasScreen;

  public static final String JSON_PROPERTY_IS_GLOBAL = "isGlobal";
  private Boolean isGlobal;

  public static final String JSON_PROPERTY_IS_INITIAL = "isInitial";
  private Boolean isInitial;

  public static final String JSON_PROPERTY_IS_AVAILABLE = "isAvailable";
  private Boolean isAvailable;

  public static final String JSON_PROPERTY_IS_CONDITIONAL = "isConditional";
  private Boolean isConditional;

  public static final String JSON_PROPERTY_FIELDS = "fields";
  private Map<String, FieldMetadata> fields = null;

  public static final String JSON_PROPERTY_EXPAND = "expand";
  private String expand;


  public IssueTransition id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The ID of the issue transition. Required when specifying a transition to undertake.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the issue transition. Required when specifying a transition to undertake.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


   /**
   * The name of the issue transition.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the issue transition.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }




   /**
   * Details of the issue status after the transition.
   * @return to
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Details of the issue status after the transition.")
  @JsonProperty(JSON_PROPERTY_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StatusDetails getTo() {
    return to;
  }




   /**
   * Whether there is a screen associated with the issue transition.
   * @return hasScreen
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether there is a screen associated with the issue transition.")
  @JsonProperty(JSON_PROPERTY_HAS_SCREEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHasScreen() {
    return hasScreen;
  }




   /**
   * Whether the issue transition is global, that is, the transition is applied to issues regardless of their status.
   * @return isGlobal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the issue transition is global, that is, the transition is applied to issues regardless of their status.")
  @JsonProperty(JSON_PROPERTY_IS_GLOBAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsGlobal() {
    return isGlobal;
  }




   /**
   * Whether this is the initial issue transition for the workflow.
   * @return isInitial
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether this is the initial issue transition for the workflow.")
  @JsonProperty(JSON_PROPERTY_IS_INITIAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsInitial() {
    return isInitial;
  }




   /**
   * Whether the transition is available to be performed.
   * @return isAvailable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the transition is available to be performed.")
  @JsonProperty(JSON_PROPERTY_IS_AVAILABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsAvailable() {
    return isAvailable;
  }




   /**
   * Whether the issue has to meet criteria before the issue transition is applied.
   * @return isConditional
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the issue has to meet criteria before the issue transition is applied.")
  @JsonProperty(JSON_PROPERTY_IS_CONDITIONAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsConditional() {
    return isConditional;
  }




   /**
   * Details of the fields associated with the issue transition screen. Use this information to populate &#x60;fields&#x60; and &#x60;update&#x60; in a transition request.
   * @return fields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Details of the fields associated with the issue transition screen. Use this information to populate `fields` and `update` in a transition request.")
  @JsonProperty(JSON_PROPERTY_FIELDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, FieldMetadata> getFields() {
    return fields;
  }




   /**
   * Expand options that include additional transition details in the response.
   * @return expand
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Expand options that include additional transition details in the response.")
  @JsonProperty(JSON_PROPERTY_EXPAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExpand() {
    return expand;
  }




  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssueTransition issueTransition = (IssueTransition) o;
    return Objects.equals(this.id, issueTransition.id) &&
        Objects.equals(this.name, issueTransition.name) &&
        Objects.equals(this.to, issueTransition.to) &&
        Objects.equals(this.hasScreen, issueTransition.hasScreen) &&
        Objects.equals(this.isGlobal, issueTransition.isGlobal) &&
        Objects.equals(this.isInitial, issueTransition.isInitial) &&
        Objects.equals(this.isAvailable, issueTransition.isAvailable) &&
        Objects.equals(this.isConditional, issueTransition.isConditional) &&
        Objects.equals(this.fields, issueTransition.fields) &&
        Objects.equals(this.expand, issueTransition.expand) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, to, hasScreen, isGlobal, isInitial, isAvailable, isConditional, fields, expand, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssueTransition {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    hasScreen: ").append(toIndentedString(hasScreen)).append("\n");
    sb.append("    isGlobal: ").append(toIndentedString(isGlobal)).append("\n");
    sb.append("    isInitial: ").append(toIndentedString(isInitial)).append("\n");
    sb.append("    isAvailable: ").append(toIndentedString(isAvailable)).append("\n");
    sb.append("    isConditional: ").append(toIndentedString(isConditional)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    expand: ").append(toIndentedString(expand)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

