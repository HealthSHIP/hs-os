/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.healthship.jira.client.api;

import org.healthship.jira.client.model.Avatar;
import org.healthship.jira.client.model.Avatars;
import org.healthship.jira.client.model.SystemAvatars;
import org.junit.Ignore;
import org.junit.Test;

/**
 * API tests for AvatarsApi
 */
@Ignore
public class AvatarsApiTest {

    private final AvatarsApi api = new AvatarsApi();

    
    /**
     * Get system avatars by type
     *
     * Returns a list of system avatar details by owner type, where the owner types are issue type, project, or user.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     */
    @Test
    public void comAtlassianJiraRestV2IssueAvatarResourceGetAllSystemAvatarsGetTest()  {
        String type = null;
        SystemAvatars response = api.comAtlassianJiraRestV2IssueAvatarResourceGetAllSystemAvatarsGet(type).block();

        // TODO: test validations
    }
    
    /**
     * Delete avatar
     *
     * Deletes an avatar from a project or issue type.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    @Test
    public void comAtlassianJiraRestV2IssueUniversalAvatarResourceDeleteAvatarDeleteTest()  {
        String type = null;
        String owningObjectId = null;
        Long id = null;
        api.comAtlassianJiraRestV2IssueUniversalAvatarResourceDeleteAvatarDelete(type, owningObjectId, id).block();

        // TODO: test validations
    }
    
    /**
     * Get avatars
     *
     * Returns the system and custom avatars for a project or issue type.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     */
    @Test
    public void comAtlassianJiraRestV2IssueUniversalAvatarResourceGetAvatarsGetTest()  {
        String type = null;
        String entityId = null;
        Avatars response = api.comAtlassianJiraRestV2IssueUniversalAvatarResourceGetAvatarsGet(type, entityId).block();

        // TODO: test validations
    }
    
    /**
     * Load avatar
     *
     * Loads a custom avatar for a project or issue type.  Specify the avatar&#39;s local file location in the body of the request. Also, include the following headers:   *  &#x60;X-Atlassian-Token: no-check&#x60; To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).  *  &#x60;Content-Type: image/image type&#x60; Valid image types are JPEG, GIF, or PNG.  For example:   &#x60;curl --request POST &#x60;  &#x60;--user email@example.com:&lt;api_token&gt; &#x60;  &#x60;--header &#39;X-Atlassian-Token: no-check&#39; &#x60;  &#x60;--header &#39;Content-Type: image/&lt; image_type&gt;&#39; &#x60;  &#x60;--data-binary \&quot;&lt;@/path/to/file/with/your/avatar&gt;\&quot; &#x60;  &#x60;--url &#39;https://your-domain.atlassian.net/rest/api/3/universal_avatar/type/{type}/owner/{entityId}&#39;&#x60;  The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square&#39;s sides is set to the smaller of the height or width of the image.  The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.  After creating the avatar use:   *  [Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type&#39;s displayed avatar.  *  [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project&#39;s displayed avatar.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    @Test
    public void comAtlassianJiraRestV2IssueUniversalAvatarResourceStoreAvatarPostTest()  {
        String type = null;
        String entityId = null;
        Integer size = null;
        Object body = null;
        Integer x = null;
        Integer y = null;
        Avatar response = api.comAtlassianJiraRestV2IssueUniversalAvatarResourceStoreAvatarPost(type, entityId, size, body, x, y).block();

        // TODO: test validations
    }
    
}
