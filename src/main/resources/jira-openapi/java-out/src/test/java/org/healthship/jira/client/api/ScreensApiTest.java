/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.healthship.jira.client.api;

import org.healthship.jira.client.model.*;
import org.junit.Ignore;
import org.junit.Test;

import java.util.List;

/**
 * API tests for ScreensApi
 */
@Ignore
public class ScreensApiTest {

    private final ScreensApi api = new ScreensApi();

    
    /**
     * Get screens for a field
     *
     * Returns a [paginated](#pagination) list of the screens a field is used in.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    @Test
    public void comAtlassianJiraRestV2IssueFieldResourceGetScreensForFieldGetTest()  {
        String fieldId = null;
        Long startAt = null;
        Integer maxResults = null;
        PageBeanScreen response = api.comAtlassianJiraRestV2IssueFieldResourceGetScreensForFieldGet(fieldId, startAt, maxResults).block();

        // TODO: test validations
    }
    
    /**
     * Get issue type screen scheme items
     *
     * Returns a list of issue type screen scheme items.  Only issue type screen schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    @Test
    public void comAtlassianJiraRestV2IssueIssuetypescreenschemeIssueTypeScreenSchemeResourceGetIssueTypeScreenSchemeMappingsGetTest()  {
        Long startAt = null;
        Integer maxResults = null;
        List<Long> issueTypeScreenSchemeId = null;
        PageBeanIssueTypeScreenSchemeItem response = api.comAtlassianJiraRestV2IssueIssuetypescreenschemeIssueTypeScreenSchemeResourceGetIssueTypeScreenSchemeMappingsGet(startAt, maxResults, issueTypeScreenSchemeId).block();

        // TODO: test validations
    }
    
    /**
     * Get issue type screen schemes for projects
     *
     * Returns a list of issue type screen schemes and, for each issue type screen scheme, a list of the projects that use it.  Only issue type screen schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    @Test
    public void comAtlassianJiraRestV2IssueIssuetypescreenschemeIssueTypeScreenSchemeResourceGetIssueTypeScreenSchemeProjectAssociationsGetTest()  {
        Long startAt = null;
        Integer maxResults = null;
        List<Long> projectId = null;
        PageBeanIssueTypeScreenSchemesProjects response = api.comAtlassianJiraRestV2IssueIssuetypescreenschemeIssueTypeScreenSchemeResourceGetIssueTypeScreenSchemeProjectAssociationsGet(startAt, maxResults, projectId).block();

        // TODO: test validations
    }
    
    /**
     * Add field to default screen
     *
     * Adds a field to the default tab of the default screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    @Test
    public void comAtlassianJiraRestV2IssueScreensResourceAddFieldToDefaultScreenPostTest()  {
        String fieldId = null;
        Object response = api.comAtlassianJiraRestV2IssueScreensResourceAddFieldToDefaultScreenPost(fieldId).block();

        // TODO: test validations
    }
    
    /**
     * Add screen tab field
     *
     * Adds a field to a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    @Test
    public void comAtlassianJiraRestV2IssueScreensResourceAddScreenTabFieldPostTest()  {
        Long screenId = null;
        Long tabId = null;
        AddFieldBean addFieldBean = null;
        ScreenableField response = api.comAtlassianJiraRestV2IssueScreensResourceAddScreenTabFieldPost(screenId, tabId, addFieldBean).block();

        // TODO: test validations
    }
    
    /**
     * Create screen tab
     *
     * Creates a tab for a screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    @Test
    public void comAtlassianJiraRestV2IssueScreensResourceAddScreenTabPostTest()  {
        Long screenId = null;
        ScreenableTab screenableTab = null;
        ScreenableTab response = api.comAtlassianJiraRestV2IssueScreensResourceAddScreenTabPost(screenId, screenableTab).block();

        // TODO: test validations
    }
    
    /**
     * Delete screen tab
     *
     * Deletes a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    @Test
    public void comAtlassianJiraRestV2IssueScreensResourceDeleteScreenTabDeleteTest()  {
        Long screenId = null;
        Long tabId = null;
        api.comAtlassianJiraRestV2IssueScreensResourceDeleteScreenTabDelete(screenId, tabId).block();

        // TODO: test validations
    }
    
    /**
     * Get all screen tab fields
     *
     * Returns all fields for a screen tab.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
     */
    @Test
    public void comAtlassianJiraRestV2IssueScreensResourceGetAllScreenTabFieldsGetTest()  {
        Long screenId = null;
        Long tabId = null;
        String projectKey = null;
        List<ScreenableField> response = api.comAtlassianJiraRestV2IssueScreensResourceGetAllScreenTabFieldsGet(screenId, tabId, projectKey).collectList().block();

        // TODO: test validations
    }
    
    /**
     * Get all screen tabs
     *
     * Returns the list of tabs for a screen.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
     */
    @Test
    public void comAtlassianJiraRestV2IssueScreensResourceGetAllScreenTabsGetTest()  {
        Long screenId = null;
        String projectKey = null;
        List<ScreenableTab> response = api.comAtlassianJiraRestV2IssueScreensResourceGetAllScreenTabsGet(screenId, projectKey).collectList().block();

        // TODO: test validations
    }
    
    /**
     * Get all screens
     *
     * Returns all screens.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    @Test
    public void comAtlassianJiraRestV2IssueScreensResourceGetAllScreensGetTest()  {
        Long startAt = null;
        Integer maxResults = null;
        PageBeanScreen response = api.comAtlassianJiraRestV2IssueScreensResourceGetAllScreensGet(startAt, maxResults).block();

        // TODO: test validations
    }
    
    /**
     * Get available screen fields
     *
     * Returns the fields that can be added to a tab on a screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    @Test
    public void comAtlassianJiraRestV2IssueScreensResourceGetAvailableScreenFieldsGetTest()  {
        Long screenId = null;
        List<ScreenableField> response = api.comAtlassianJiraRestV2IssueScreensResourceGetAvailableScreenFieldsGet(screenId).collectList().block();

        // TODO: test validations
    }
    
    /**
     * Move screen tab field
     *
     * Moves a screen tab field.  If &#x60;after&#x60; and &#x60;position&#x60; are provided in the request, &#x60;position&#x60; is ignored.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    @Test
    public void comAtlassianJiraRestV2IssueScreensResourceMoveScreenTabFieldPostTest()  {
        Long screenId = null;
        Long tabId = null;
        String id = null;
        MoveFieldBean moveFieldBean = null;
        Object response = api.comAtlassianJiraRestV2IssueScreensResourceMoveScreenTabFieldPost(screenId, tabId, id, moveFieldBean).block();

        // TODO: test validations
    }
    
    /**
     * Move screen tab
     *
     * Moves a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    @Test
    public void comAtlassianJiraRestV2IssueScreensResourceMoveScreenTabPostTest()  {
        Long screenId = null;
        Long tabId = null;
        Integer pos = null;
        Object response = api.comAtlassianJiraRestV2IssueScreensResourceMoveScreenTabPost(screenId, tabId, pos).block();

        // TODO: test validations
    }
    
    /**
     * Remove screen tab field
     *
     * Removes a field from a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    @Test
    public void comAtlassianJiraRestV2IssueScreensResourceRemoveScreenTabFieldDeleteTest()  {
        Long screenId = null;
        Long tabId = null;
        String id = null;
        api.comAtlassianJiraRestV2IssueScreensResourceRemoveScreenTabFieldDelete(screenId, tabId, id).block();

        // TODO: test validations
    }
    
    /**
     * Update screen tab
     *
     * Updates the name of a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    @Test
    public void comAtlassianJiraRestV2IssueScreensResourceRenameScreenTabPutTest()  {
        Long screenId = null;
        Long tabId = null;
        ScreenableTab screenableTab = null;
        ScreenableTab response = api.comAtlassianJiraRestV2IssueScreensResourceRenameScreenTabPut(screenId, tabId, screenableTab).block();

        // TODO: test validations
    }
    
    /**
     * Get all screen schemes
     *
     * Returns all screen schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    @Test
    public void comAtlassianJiraRestV2IssueScreenschemeScreenSchemeResourceGetAllScreenSchemesGetTest()  {
        Long startAt = null;
        Integer maxResults = null;
        PageBeanScreenScheme response = api.comAtlassianJiraRestV2IssueScreenschemeScreenSchemeResourceGetAllScreenSchemesGet(startAt, maxResults).block();

        // TODO: test validations
    }
    
}
